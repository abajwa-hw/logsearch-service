<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- logfeeder.properties -->
<configuration>
  <property>
    <name>content</name>
    <description>This is the jinja template for config.json file</description>
    <value>{
    "global" : {
        "add_fields" : { "cluster": "{{cluster_name}}"},
        "source" : "file",
        "tail" : "true",
        "start_position" : "end",
        "metrics_collector_hosts" : "{{metrics_collector_hosts}}",
        "post_map_values" : {"logtime" : {"map_date": {"date_pattern" : "yyyy-MM-dd HH:mm:ss,SSS"}}}
    },
    "input": [
		{
			"type":"accumulo_gc",
			"rowtype":"service",
			"path":"{{accumulo_log_dir}}/gc_*.log"
		},   
		{
			"type":"accumulo_master",
			"rowtype":"service",
			"path":"{{accumulo_log_dir}}/master_*.log"
		},   
		{
			"type":"accumulo_monitor",
			"rowtype":"service",
			"path":"{{accumulo_log_dir}}/monitor_*.log"
		},   
		{
			"type":"accumulo_tracer",
			"rowtype":"service",
			"path":"{{accumulo_log_dir}}/tracer_*.log"
		}, 					
		{
			"type":"accumulo_tserver",
			"rowtype":"service",
			"path":"{{accumulo_log_dir}}/tserver_*.log"
		},		
		{
			"type":"atlas_app",
			"rowtype":"service",
			"path":"{{atlas_log_dir}}/application.log"
		},			 
		{
			"type":"ambari_server",
			"rowtype":"service",
			"path":"{{ambari_server_log_dir}}/ambari-server.log"
		},		
		{
			"type":"ams_hbase_master",
			"rowtype":"service",
			"path":"{{metrics_collector_log_dir}}/hbase-ams-master-*.log"
		},
		{
			"type":"ams_hbase_regionserver",
			"rowtype":"service",
			"path":"{{metrics_collector_log_dir}}/hbase-ams-regionserver-*.log"
		},
		{
			"type":"ams_collector",
			"rowtype":"service",
			"path":"{{metrics_collector_log_dir}}/ambari-metrics-collector.log"
		},
		{
			"type":"falcon_app",
			"rowtype":"service",
			"path":"{{falcon_log_dir}}/falcon.application.log"
		},
        {
            "type": "hbase_master",
			"rowtype":"service",                        
            "path": "{{hbase_log_dir}}/hbase-hbase-master-*.log"
        },           
        {
            "type": "hbase_regionserver",
			"rowtype":"service",                        
            "path": "{{hbase_log_dir}}/hbase-hbase-regionserver-*.log"
        },		
        {
            "type": "hdfs_datanode",
			"rowtype":"service",                        
            "path": "{{hdfs_log_dir_prefix}}/hdfs/hadoop-hdfs-datanode-*.log"
        },  
        {
            "type": "hdfs_namenode",
			"rowtype":"service",                        
            "path": "{{hdfs_log_dir_prefix}}/hdfs/hadoop-hdfs-namenode-*.log"
        },  
        {
            "type": "hdfs_journalnode",
			"rowtype":"service",                        
            "path": "{{hdfs_log_dir_prefix}}/hdfs/hadoop-hdfs-journalnode-*.log"
        },              
        {
            "type": "hdfs_secondarynamenode",
			"rowtype":"service",                        
            "path": "{{hdfs_log_dir_prefix}}/hdfs/hadoop-hdfs-secondarynamenode-*.log"
        },             
        {
            "type": "hdfs_zkfc",
			"rowtype":"service",                        
            "path": "{{hdfs_log_dir_prefix}}/hdfs/hadoop-hdfs-zkfc-*.log"
        },             
		{
			"is_enabled":"false",
			"type":"hive_hiveserver2",
			"rowtype":"service",
			"path":"{{hive_log_dir}}/hiveserver2.log"
		},
		{
			"type":"hive_metastore",
			"rowtype":"service",
			"path":"{{hive_log_dir}}/hivemetastore.log"
		},
		{
			"type":"kafka_controller",
			"rowtype":"service",
			"path":"{{kafka_log_dir}}/controller.log"
		},
		{
			"type":"kafka_request",
			"rowtype":"service",
			"path":"{{kafka_log_dir}}/kafka-request.log"
		},
		{
			"type":"kafka_logcleaner",
			"rowtype":"service",
			"path":"{{kafka_log_dir}}/log-cleaner"
		},
		{
			"type":"kafka_server",
			"rowtype":"service",
			"path":"{{kafka_log_dir}}/server.log"
		},
		{
			"type":"kafka_statechange",
			"rowtype":"service",
			"path":"{{kafka_log_dir}}/state-change.log"
		},        
		{
			"type":"knox_gateway",
			"rowtype":"service",
			"path":"{{knox_log_dir}}/gateway.log"
		},
		{
			"type":"knox_cli",
			"rowtype":"service",
			"path":"{{knox_log_dir}}/knoxcli.log"
		},
		{
			"type":"knox_ldap",
			"rowtype":"service",
			"path":"{{knox_log_dir}}/ldap.log"
		},        
		{
			"type":"mapred_historyserver",
			"rowtype":"service",
			"path":"{{mapred_log_dir_prefix}}/mapred/mapred-mapred-historyserver*.log"
		},                
		{
			"type":"logsearch_app",
			"rowtype":"service",
			"path":"{{logsearch_log_dir}}/logsearch.log"
		},
		{
			"type":"logsearch_feeder",
			"rowtype":"service",
			"path":"{{logfeeder_log_dir}}/logfeeder.log"
		},     
		{
			"type":"ranger_dbpatch",
			"is_enabled":"true",
			"path":"{{ranger_admin_log_dir}}/ranger_db_patch.log"
		},    
		{
			"type":"ranger_admin",
			"is_enabled":"true",
			"path":"{{ranger_admin_log_dir}}/xa_portal.log"
		},    		
        {
            "type": "ranger_kms",
			"rowtype":"service",                        
            "path": "{{ranger_kms_log_dir}}/kms.log"
        }, 		    
        {
            "type": "ranger_usersync",
			"rowtype":"service",                        
            "path": "{{ranger_usersync_log_dir}}/usersync.log"
        },           
		{
			"type":"oozie_app",
			"rowtype":"service",                        
			"path":"{{oozie_log_dir}}/oozie.log"
		},            
        {
            "type": "yarn_nodemanager",
			"rowtype":"service",                        
            "path": "{{yarn_log_dir_prefix}}/yarn/yarn-yarn-nodemanager-*.log"
        },             
        {
            "type": "yarn_resourcemanager",
			"rowtype":"service",                        
            "path": "{{yarn_log_dir_prefix}}/yarn/yarn-yarn-resourcemanager-*.log"
        },             
        {
            "type": "yarn_timelineserver",
			"rowtype":"service",                        
            "path": "{{yarn_log_dir_prefix}}/yarn/yarn-yarn-timelineserver-*.log"
        },    
        {
            "type": "yarn_historyserver",
			"rowtype":"service",                        
            "path": "{{yarn_log_dir_prefix}}/yarn/yarn-yarn-historyserver-*.log"
        },   
        {
            "type": "yarn_jobsummary",
			"rowtype":"service",                        
            "path": "{{yarn_log_dir_prefix}}/yarn/hadoop-mapreduce.jobsummary.log"
        }, 
		{
			"type":"storm_drpc",
			"rowtype":"service",
			"path":"{{storm_log_dir}}/drpc.log"
		},
		{
			"type":"storm_logviewer",
			"rowtype":"service",
			"path":"{{storm_log_dir}}/logviewer.log"
		},
		{
			"type":"storm_nimbus",
			"rowtype":"service",
			"path":"{{storm_log_dir}}/nimbus.log"
		},
		{
			"type":"storm_supervisor",
			"rowtype":"service",
			"path":"{{storm_log_dir}}/supervisor.log"
		},
		{
			"type":"storm_ui",
			"rowtype":"service",
			"path":"{{storm_log_dir}}/ui.log"
		},
		{
			"type": "zookeeper",
			"rowtype":"service",                        
			"path": "{{zk_log_dir}}/zookeeper/zookeeper*.out"
		}
    ],
    "filter": [
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"accumulo_master"
					]
				}
			},
			"log4j_format":"%d{ISO8601} [%-8c{2}] %-5p: %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}\\[%{JAVACLASS:logger_name}\\]%{SPACE}%{LOGLEVEL:level}:%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"comment":"This one has one extra space after LEVEL",
			"conditions":{
				"fields":{
					"type":[
						"accumulo_gc",
						"accumulo_monitor",
						"accumulo_tracer",
						"accumulo_tserver"
					]
				}
			},
			"log4j_format":"%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}\\[%{JAVACLASS:logger_name}\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}:%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"atlas_app",
						"falcon_app"
					]
				}
			},
			"log4j_format":"%d %-5p - [%t:%x] ~ %m (%c{1}:%L)%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{SPACE}-%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}~%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"ams_collector"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %p %c: %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"ams_hbase_master",
						"ams_hbase_regionserver",
						"hbase_master",
						"hbase_regionserver"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %-5p [%t] %c{2}: %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"ambari_server"
					]
				}
			},
			"log4j_format":"%d{DATE} %5p [%t] %c{1}:%L - %m%n",
			"multiline_pattern":"^(%{USER_SYNC_DATE:logtime})",
			"message_pattern":"(?m)^%{USER_SYNC_DATE:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}%{JAVACLASS:logger_name}:%{INT:line_number}%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}",
			"post_map_values":{
				"logtime":{
					"map_date":{
						"date_pattern":"dd MMM yyyy HH:mm:ss"
					}
				}
			}
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"hdfs_datanode",
						"hdfs_secondarynamenode",
						"hdfs_namenode",
						"knox_gateway",
						"knox_cli",
						"knox_ldap",
						"mapred_historyserver",
						"yarn_nodemanager",
						"yarn_resourcemanager",
						"yarn_timelineserver"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\(%{JAVAFILE:file}:%{JAVAMETHOD:method}\\(%{INT:line_number}\\)\\)%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"hive_hiveserver2",
						"hive_metastore"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %-5p [%t]: %c{2} (%F:%M(%L)) - %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\[%{DATA:thread_name}\\]:%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\(%{JAVAFILE:file}:%{JAVAMETHOD:method}\\(%{INT:line_number}\\)\\)%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"kafka_controller",
						"kafka_request",
						"kafka_logcleaner"
					]
				}
			},
			"log4j_format":"[%d] %p %m (%c)%n",
			"multiline_pattern":"^(\\[%{TIMESTAMP_ISO8601:logtime}\\])",
			"message_pattern":"(?m)^\\[%{TIMESTAMP_ISO8601:logtime}\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"comment":"Suppose to be same log4j pattern as other kafka processes, but some reason thread is not printed",
			"conditions":{
				"fields":{
					"type":[
						"kafka_server",
						"kafka_statechange"
					]
				}
			},
			"log4j_format":"[%d] %p %m (%c)%n",
			"multiline_pattern":"^(\\[%{TIMESTAMP_ISO8601:logtime}\\])",
			"message_pattern":"(?m)^\\[%{TIMESTAMP_ISO8601:logtime}\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"oozie_app"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %5p %c{1}:%L - SERVER[${oozie.instance.id}] %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{DATA:logger_name}:%{INT:line_number}%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"logsearch_app",
						"logsearch_feeder",
						"ranger_admin",
						"ranger_dbpatch"
					]
				}
			},
			"log4j_format":"%d [%t] %-5p %C{6} (%F:%L) - %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\(%{JAVAFILE:file}:%{INT:line_number}\\)%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"ranger_kms"
					]
				}
			},
			"log4j_format":"%d{ISO8601} %-5p %c{1} - %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"ranger_usersync"
					]
				}
			},
			"log4j_format":"%d{dd MMM yyyy HH:mm:ss} %5p %c{1} [%t] - %m%n",
			"multiline_pattern":"^(%{USER_SYNC_DATE:logtime})",
			"message_pattern":"(?m)^%{USER_SYNC_DATE:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\[%{DATA:thread_name}\\]%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}",
			"post_map_values":{
				"logtime":{
					"map_date":{
						"date_pattern":"dd MMM yyyy HH:mm:ss"
					}
				}
			}
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"storm_drpc",
						"storm_logviewer",
						"storm_nimbus",
						"storm_supervisor",
						"storm_ui"
					]
				}
			},
			"log4j_format":"",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\[%{LOGLEVEL:level}\\]%{SPACE}%{SPACE}%{GREEDYDATA:log_message}",
			"post_map_values" : {"logtime" : {"map_date": {"date_pattern" : "yyyy-MM-dd HH:mm:ss.SSS"}}}			
		},
		{
			"filter":"grok",
			"conditions":{
				"fields":{
					"type":[
						"zookeeper"
					]
				}
			},
			"log4j_format":"%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n",
			"multiline_pattern":"^(%{TIMESTAMP_ISO8601:logtime})",
			"message_pattern":"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}-%{SPACE}%{LOGLEVEL:level}%{SPACE}\\[%{DATA:thread_name}\\@%{INT:line_number}\\]%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}"
		}
    ],
    "output": [
        {
            "destination" : "solr",
            "zk_hosts" : "{{zookeeper_quorum}}{{solr_znode}}",
            "collection" : "hadoop_logs",
            "url": ""
        }
    ]
}    </value>
  </property>

  
</configuration>  
